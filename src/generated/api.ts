/* tslint:disable */
/* eslint-disable */
/**
 * Github Searcher
 * documentation for Github Searcher backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Search
 */
export interface Search {
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    searchTerm?: string;
    /**
     * type of search, user, repository, issue, etc.
     * @type {string}
     * @memberof Search
     */
    searchType?: SearchSearchTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SearchSearchTypeEnum {
    Users = 'users',
    Repositories = 'repositories',
    Issues = 'issues'
}


/**
 * ClearApi - axios parameter creator
 * @export
 */
export const ClearApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * clear cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClearCacheGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/clear-cache`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClearApi - functional programming interface
 * @export
 */
export const ClearApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClearApiAxiosParamCreator(configuration)
    return {
        /**
         * clear cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClearCacheGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClearCacheGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClearApi - factory interface
 * @export
 */
export const ClearApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClearApiFp(configuration)
    return {
        /**
         * clear cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClearCacheGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiClearCacheGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClearApi - object-oriented interface
 * @export
 * @class ClearApi
 * @extends {BaseAPI}
 */
export class ClearApi extends BaseAPI {
    /**
     * clear cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClearApi
     */
    public apiClearCacheGet(options?: any) {
        return ClearApiFp(this.configuration).apiClearCacheGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search for github users, issues, repositories, etc.
         * @param {Search} [body] search for a user, repository, issue, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchPost: async (body?: Search, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Search for github users, issues, repositories, etc.
         * @param {Search} [body] search for a user, repository, issue, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchPost(body?: Search, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSearchPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * Search for github users, issues, repositories, etc.
         * @param {Search} [body] search for a user, repository, issue, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchPost(body?: Search, options?: any): AxiosPromise<void> {
            return localVarFp.apiSearchPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * Search for github users, issues, repositories, etc.
     * @param {Search} [body] search for a user, repository, issue, etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public apiSearchPost(body?: Search, options?: any) {
        return SearchApiFp(this.configuration).apiSearchPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


